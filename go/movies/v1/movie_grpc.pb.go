// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: movies/v1/movie.proto

package moviesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MoviesService_GetMovies_FullMethodName    = "/movies.v1.MoviesService/GetMovies"
	MoviesService_GetMovieById_FullMethodName = "/movies.v1.MoviesService/GetMovieById"
	MoviesService_CreateMovie_FullMethodName  = "/movies.v1.MoviesService/CreateMovie"
)

// MoviesServiceClient is the client API for MoviesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoviesServiceClient interface {
	// Retrieves a list of movies.
	GetMovies(ctx context.Context, in *GetMoviesRequest, opts ...grpc.CallOption) (*GetMoviesResponse, error)
	// Retrieves the movie with the given title.
	GetMovieById(ctx context.Context, in *GetMovieByIdRequest, opts ...grpc.CallOption) (*GetMovieByIdResponse, error)
	// Creates a movie.
	CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponse, error)
}

type moviesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoviesServiceClient(cc grpc.ClientConnInterface) MoviesServiceClient {
	return &moviesServiceClient{cc}
}

func (c *moviesServiceClient) GetMovies(ctx context.Context, in *GetMoviesRequest, opts ...grpc.CallOption) (*GetMoviesResponse, error) {
	out := new(GetMoviesResponse)
	err := c.cc.Invoke(ctx, MoviesService_GetMovies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceClient) GetMovieById(ctx context.Context, in *GetMovieByIdRequest, opts ...grpc.CallOption) (*GetMovieByIdResponse, error) {
	out := new(GetMovieByIdResponse)
	err := c.cc.Invoke(ctx, MoviesService_GetMovieById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moviesServiceClient) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponse, error) {
	out := new(CreateMovieResponse)
	err := c.cc.Invoke(ctx, MoviesService_CreateMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoviesServiceServer is the server API for MoviesService service.
// All implementations must embed UnimplementedMoviesServiceServer
// for forward compatibility
type MoviesServiceServer interface {
	// Retrieves a list of movies.
	GetMovies(context.Context, *GetMoviesRequest) (*GetMoviesResponse, error)
	// Retrieves the movie with the given title.
	GetMovieById(context.Context, *GetMovieByIdRequest) (*GetMovieByIdResponse, error)
	// Creates a movie.
	CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponse, error)
	mustEmbedUnimplementedMoviesServiceServer()
}

// UnimplementedMoviesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMoviesServiceServer struct {
}

func (UnimplementedMoviesServiceServer) GetMovies(context.Context, *GetMoviesRequest) (*GetMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovies not implemented")
}
func (UnimplementedMoviesServiceServer) GetMovieById(context.Context, *GetMovieByIdRequest) (*GetMovieByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieById not implemented")
}
func (UnimplementedMoviesServiceServer) CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (UnimplementedMoviesServiceServer) mustEmbedUnimplementedMoviesServiceServer() {}

// UnsafeMoviesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoviesServiceServer will
// result in compilation errors.
type UnsafeMoviesServiceServer interface {
	mustEmbedUnimplementedMoviesServiceServer()
}

func RegisterMoviesServiceServer(s grpc.ServiceRegistrar, srv MoviesServiceServer) {
	s.RegisterService(&MoviesService_ServiceDesc, srv)
}

func _MoviesService_GetMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceServer).GetMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoviesService_GetMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceServer).GetMovies(ctx, req.(*GetMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesService_GetMovieById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceServer).GetMovieById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoviesService_GetMovieById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceServer).GetMovieById(ctx, req.(*GetMovieByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoviesService_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoviesServiceServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoviesService_CreateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoviesServiceServer).CreateMovie(ctx, req.(*CreateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MoviesService_ServiceDesc is the grpc.ServiceDesc for MoviesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoviesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movies.v1.MoviesService",
	HandlerType: (*MoviesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovies",
			Handler:    _MoviesService_GetMovies_Handler,
		},
		{
			MethodName: "GetMovieById",
			Handler:    _MoviesService_GetMovieById_Handler,
		},
		{
			MethodName: "CreateMovie",
			Handler:    _MoviesService_CreateMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movies/v1/movie.proto",
}
